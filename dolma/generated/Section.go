// automatically generated by the FlatBuffers compiler, do not modify

package generated

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type Section struct {
	_tab flatbuffers.Table
}

func GetRootAsSection(buf []byte, offset flatbuffers.UOffsetT) *Section {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Section{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *Section) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Section) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Section) Size() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Section) MutateSize(n int64) bool {
	return rcv._tab.MutateInt64Slot(4, n)
}

func (rcv *Section) Data(j int) byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetByte(a + flatbuffers.UOffsetT(j*1))
	}
	return 0
}

func (rcv *Section) DataLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *Section) DataBytes() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func SectionStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func SectionAddSize(builder *flatbuffers.Builder, size int64) {
	builder.PrependInt64Slot(0, size, 0)
}
func SectionAddData(builder *flatbuffers.Builder, data flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(data), 0)
}
func SectionStartDataVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(1, numElems, 1)
}
func SectionEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
