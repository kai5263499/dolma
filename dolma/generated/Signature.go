// automatically generated by the FlatBuffers compiler, do not modify

package generated

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type Signature struct {
	_tab flatbuffers.Table
}

func GetRootAsSignature(buf []byte, offset flatbuffers.UOffsetT) *Signature {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Signature{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *Signature) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Signature) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Signature) BinSize() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Signature) MutateBinSize(n int64) bool {
	return rcv._tab.MutateInt64Slot(4, n)
}

func (rcv *Signature) ContentHash(j int) byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetByte(a + flatbuffers.UOffsetT(j*1))
	}
	return 0
}

func (rcv *Signature) ContentHashLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *Signature) ContentHashBytes() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Signature) TotalSectionSize() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Signature) MutateTotalSectionSize(n int64) bool {
	return rcv._tab.MutateInt64Slot(8, n)
}

func (rcv *Signature) LastModified() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Signature) MutateLastModified(n int64) bool {
	return rcv._tab.MutateInt64Slot(10, n)
}

func SignatureStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func SignatureAddBinSize(builder *flatbuffers.Builder, binSize int64) {
	builder.PrependInt64Slot(0, binSize, 0)
}
func SignatureAddContentHash(builder *flatbuffers.Builder, contentHash flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(contentHash), 0)
}
func SignatureStartContentHashVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(1, numElems, 1)
}
func SignatureAddTotalSectionSize(builder *flatbuffers.Builder, totalSectionSize int64) {
	builder.PrependInt64Slot(2, totalSectionSize, 0)
}
func SignatureAddLastModified(builder *flatbuffers.Builder, lastModified int64) {
	builder.PrependInt64Slot(3, lastModified, 0)
}
func SignatureEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
